name: Stock Alert System

on:
  schedule:
    # Run every 15 minutes during market hours for quick alerts
    - cron: '*/15 13-21 * * 1-5'  # Every 15 min, 1:30 PM - 9:00 PM UTC, Mon-Fri
    
    # Daily summary at market close
    - cron: '0 21 * * 1-5'  # 9:00 PM UTC (4:00 PM ET), Mon-Fri
    
    # Morning pre-market check
    - cron: '0 13 * * 1-5'  # 1:00 PM UTC (9:00 AM ET), Mon-Fri
    
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      alert_type:
        description: 'Type of alert check'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - price_movement
          - technical_indicators
          - volume
      force_send:
        description: 'Force send alert even if recently sent'
        required: false
        default: false
        type: boolean

jobs:
  check-alerts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-alerts-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-alerts-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run alert system
      env:
        # Snowflake credentials
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE || 'COMPUTE_WH' }}
        SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE || 'WALMART_STOCK_DB' }}
        SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA || 'PUBLIC' }}
        
        # Email configuration
        SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
        SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}  # App-specific password
        RECIPIENT_EMAILS: ${{ secrets.RECIPIENT_EMAILS }}
        
        # SMTP Configuration - Explicitly set for Gmail
        SMTP_SERVER: 'smtp.gmail.com'
        SMTP_PORT: '587'
        
        # Alert thresholds - Set explicit defaults
        PRICE_CHANGE_THRESHOLD: '2.0'
        VOLUME_SPIKE_THRESHOLD: '1.5'
        RSI_OVERSOLD: '30'
        RSI_OVERBOUGHT: '70'
        
      run: |
        echo "Starting alert system check..."
        echo "SMTP Server: smtp.gmail.com:587"
        echo "Checking for stock alerts..."
        python scripts/alert_system.py
    
    - name: Upload alert history
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: alert-history-${{ github.run_number }}
        path: alert_history.json
        retention-days: 30
        if-no-files-found: ignore
    
    - name: Report status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Alert check completed successfully"
          echo "Check your email for any alerts!"
        else
          echo "❌ Alert check failed"
          echo "Check the logs above for error details"
        fi

  # Optional: Send notification on failure
  notify-failure:
    needs: check-alerts
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - name: Send failure notification
      run: |
        echo "Alert system failed at $(date)"
        echo "Error occurred in the alert checking process"
        # You can add additional notification logic here
        # For example, send a Slack message or create an issue
